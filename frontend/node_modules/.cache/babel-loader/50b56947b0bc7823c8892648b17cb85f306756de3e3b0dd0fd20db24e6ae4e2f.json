{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\iamju\\\\Downloads\\\\university-info\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [countryName, setCountryName] = useState('');\n  const [universities, setUniversities] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch(`http://universities.hipolabs.com/search?country=${countryName}`);\n      const data = await response.json();\n      setUniversities(data);\n\n      // Call API to save fetched data to backend\n      saveUniversityData(countryName, data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const saveUniversityData = async (country, universities) => {\n    try {\n      const response = await fetch('/api/universities', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          country: country,\n          universities: universities\n        })\n      });\n      if (response.ok) {\n        console.log('University data saved successfully');\n      } else {\n        console.error('Failed to save university data');\n      }\n    } catch (error) {\n      console.error('Error saving university data:', error);\n    }\n  };\n  const handleCountryChange = event => {\n    setCountryName(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"University Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"country\",\n      children: \"Country Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"country\",\n      value: countryName,\n      onChange: handleCountryChange,\n      placeholder: \"Enter country name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchData,\n      children: \"Fetch Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"List of Universities\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), universities.map((uni, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: uni.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Yg+lepgiZvMGYm55x4DPDBoVj1I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","countryName","setCountryName","universities","setUniversities","fetchData","response","fetch","data","json","saveUniversityData","error","console","country","method","headers","body","JSON","stringify","ok","log","handleCountryChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","placeholder","onClick","map","uni","index","name","_c","$RefreshReg$"],"sources":["C:/Users/iamju/Downloads/university-info/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [countryName, setCountryName] = useState('');\n  const [universities, setUniversities] = useState([]);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(`http://universities.hipolabs.com/search?country=${countryName}`);\n      const data = await response.json();\n      setUniversities(data);\n\n      // Call API to save fetched data to backend\n      saveUniversityData(countryName, data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const saveUniversityData = async (country, universities) => {\n    try {\n      const response = await fetch('/api/universities', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          country: country,\n          universities: universities\n        })\n      });\n      if (response.ok) {\n        console.log('University data saved successfully');\n      } else {\n        console.error('Failed to save university data');\n      }\n    } catch (error) {\n      console.error('Error saving university data:', error);\n    }\n  };\n\n  const handleCountryChange = (event) => {\n    setCountryName(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>University Data</h1>\n      <label htmlFor=\"country\">Country Name:</label>\n      <input\n        type=\"text\"\n        id=\"country\"\n        value={countryName}\n        onChange={handleCountryChange}\n        placeholder=\"Enter country name\"\n      />\n      <button onClick={fetchData}>Fetch Data</button>\n      <h2>List of Universities</h2>\n      {universities.map((uni, index) => (\n        <div key={index}>\n          <p>{uni.name}</p>\n          {/* Render other university data as needed */}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}